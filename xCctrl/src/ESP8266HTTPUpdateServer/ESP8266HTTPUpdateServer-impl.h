#include <Arduino.h>
#include <WiFiClient.h>
#include <WiFiServer.h>
#include <ESP8266WebServer.h>
#include <WiFiUdp.h>
#include <flash_hal.h>
#include <FS.h>
#include "StreamString.h"
#include "ESP8266HTTPUpdateServer.h"

namespace esp8266httpupdateserver {
using namespace esp8266webserver;

 const uint8_t serverIndex[] PROGMEM ={
 0x1F, 0x8B, 0x08, 0x08, 0x0C, 0xB1, 0xEF, 0x5F, 0x00, 0x00, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 
 0x2E, 0x68, 0x74, 0x6D, 0x6C, 0x00, 0xAD, 0x56, 0xDF, 0x6F, 0xDB, 0x36, 0x10, 0x7E, 0x8E, 0xFF, 
 0x0A, 0xCE, 0xC1, 0xC0, 0x97, 0xD0, 0xB2, 0x53, 0x3B, 0x4E, 0x54, 0xC9, 0x2F, 0xD9, 0x82, 0x3E, 
 0x6C, 0x68, 0xD1, 0x66, 0x40, 0x87, 0x61, 0x0F, 0x94, 0x74, 0xB2, 0x88, 0x50, 0xA4, 0x40, 0x51, 
 0x76, 0xDC, 0x21, 0xFF, 0xFB, 0x8E, 0x94, 0x64, 0xCB, 0x8D, 0x8B, 0x79, 0xEB, 0x0C, 0x98, 0x32, 
 0x4F, 0xF7, 0xE3, 0xFB, 0xEE, 0x8E, 0x3C, 0x47, 0x3F, 0xFC, 0xF4, 0xFE, 0xFE, 0xF1, 0xF7, 0x0F, 
 0x3F, 0x93, 0xC2, 0x96, 0x72, 0x35, 0x8A, 0xDC, 0x83, 0x48, 0xAE, 0xD6, 0x31, 0x05, 0x45, 0x9D, 
 0x00, 0x78, 0xB6, 0x1A, 0x11, 0x12, 0x95, 0x60, 0x39, 0x49, 0x0B, 0x6E, 0x6A, 0xB0, 0x31, 0x6D, 
 0x6C, 0xCE, 0x6E, 0xE9, 0xE1, 0x85, 0xE2, 0x25, 0xC4, 0x74, 0x23, 0x60, 0x5B, 0x69, 0x63, 0x29, 
 0x49, 0xB5, 0xB2, 0xA0, 0x50, 0x71, 0x2B, 0x32, 0x5B, 0xC4, 0x19, 0x6C, 0x44, 0x0A, 0xCC, 0x6F, 
 0xAE, 0x84, 0x12, 0x56, 0x70, 0xC9, 0xEA, 0x94, 0x4B, 0x88, 0x67, 0x34, 0xF0, 0x6E, 0xAC, 0xB0, 
 0x12, 0x56, 0xF0, 0x19, 0xCD, 0x32, 0xC8, 0xC8, 0xBD, 0xD6, 0x15, 0x2E, 0xCA, 0x1A, 0x2D, 0x25, 
 0x18, 0xF2, 0xEE, 0xF1, 0xD7, 0x5F, 0xC8, 0x6F, 0x55, 0xC6, 0x2D, 0x98, 0x28, 0x68, 0x95, 0x9D, 
 0x99, 0x14, 0xEA, 0x89, 0x18, 0x90, 0xF1, 0x58, 0x60, 0xCC, 0x31, 0xB1, 0xBB, 0x0A, 0xF0, 0x77, 
 0xC9, 0xD7, 0x10, 0x54, 0x6A, 0x3D, 0x26, 0x85, 0x81, 0x3C, 0x1E, 0x07, 0x39, 0xDF, 0x38, 0x85, 
 0x09, 0x2E, 0xE3, 0xAF, 0x60, 0x8F, 0x6D, 0x01, 0x25, 0xB0, 0x54, 0x4B, 0x6D, 0xC6, 0x7B, 0xE4, 
 0xE3, 0xCB, 0xE9, 0xF4, 0x76, 0x79, 0x9B, 0xA3, 0x76, 0x54, 0xDB, 0x9D, 0x0B, 0x97, 0xA2, 0x1C, 
 0xA1, 0xFC, 0x85, 0xE6, 0x84, 0x78, 0x2E, 0x21, 0x99, 0x5F, 0x4F, 0xAB, 0xE7, 0xB7, 0x5E, 0x52, 
 0xF2, 0x67, 0xD6, 0x49, 0x67, 0xD3, 0xE9, 0x8F, 0xBD, 0xD0, 0xAC, 0x85, 0x0A, 0x09, 0x6A, 0x11, 
 0xDE, 0x58, 0xDD, 0x4A, 0x73, 0x0C, 0xC2, 0x72, 0x5E, 0x0A, 0xB9, 0x0B, 0x09, 0xFD, 0xA8, 0x13, 
 0x6D, 0x35, 0xBD, 0x22, 0x35, 0x57, 0x35, 0xAB, 0xC1, 0x88, 0xBC, 0x55, 0xF3, 0x90, 0x42, 0x72, 
 0x39, 0x9F, 0xCF, 0xDF, 0x8E, 0x5E, 0x46, 0xAE, 0x16, 0xFB, 0xF8, 0x09, 0x4F, 0x9F, 0xD6, 0x46, 
 0x37, 0x2A, 0x63, 0xBD, 0x9A, 0x07, 0xFC, 0x70, 0x64, 0xBA, 0x2D, 0x84, 0x85, 0x56, 0x52, 0xF1, 
 0x2C, 0x13, 0x6A, 0x1D, 0x92, 0x9B, 0x1E, 0xF0, 0x99, 0x28, 0x12, 0xFD, 0xCC, 0xEA, 0x82, 0x67, 
 0x7A, 0x8B, 0xC4, 0x90, 0x86, 0xFB, 0x2E, 0xF0, 0x7B, 0xB9, 0xF0, 0x9F, 0xCE, 0xBB, 0xAE, 0xB1, 
 0xAA, 0x1A, 0x99, 0x62, 0x31, 0xB8, 0x15, 0x1B, 0xF0, 0x88, 0x67, 0x1D, 0xDA, 0x41, 0x1A, 0xFE, 
 0x55, 0x6C, 0xAF, 0x56, 0x8B, 0x2F, 0x10, 0x92, 0x37, 0xD7, 0xCE, 0x63, 0x5B, 0x83, 0x55, 0x26, 
 0x36, 0x9D, 0xE7, 0x3D, 0xAD, 0xEB, 0xB9, 0xC3, 0x36, 0x1D, 0x2E, 0x67, 0xE2, 0x7F, 0x19, 0x4D, 
 0x92, 0xC6, 0x5A, 0xAD, 0x3A, 0x97, 0x16, 0x9E, 0x2D, 0xCB, 0x20, 0xD5, 0x86, 0xB7, 0x94, 0x94, 
 0x56, 0xD0, 0xFB, 0x32, 0x58, 0x82, 0xA1, 0xE4, 0x75, 0xA2, 0xFF, 0xA1, 0x32, 0xC3, 0x3A, 0x78, 
 0xD0, 0xAF, 0x98, 0xCE, 0xF6, 0x15, 0x4A, 0x1B, 0x53, 0x3B, 0x07, 0x95, 0x16, 0x8E, 0xF6, 0xB7, 
 0xF9, 0xDC, 0x74, 0x7C, 0x5A, 0x0D, 0xDD, 0x58, 0x3C, 0x17, 0x30, 0x84, 0xD9, 0x17, 0x60, 0x76, 
 0xDD, 0x35, 0xE2, 0x57, 0x1D, 0x99, 0x89, 0xBA, 0x92, 0x1C, 0x6B, 0x21, 0x94, 0x33, 0x65, 0x89, 
 0xD4, 0xE9, 0xD3, 0x20, 0x35, 0x61, 0xA1, 0x37, 0x87, 0xDE, 0x3B, 0x81, 0xE0, 0x8D, 0x43, 0xD0, 
 0x35, 0xAA, 0x50, 0x55, 0x63, 0xFF, 0xF0, 0x47, 0xD1, 0xE0, 0x5D, 0x02, 0x7F, 0x76, 0x76, 0x6C, 
 0x0B, 0xC9, 0x93, 0xB0, 0x8C, 0x57, 0x15, 0x70, 0x7C, 0x93, 0x1E, 0x41, 0x3C, 0x81, 0xFA, 0x9B, 
 0xC7, 0xC9, 0x67, 0xE8, 0x44, 0xA0, 0x30, 0xEC, 0x63, 0xD4, 0x52, 0x60, 0xA5, 0x98, 0x2D, 0x9A, 
 0x32, 0x39, 0x2B, 0x7C, 0x5F, 0xDA, 0x7D, 0xDF, 0x14, 0x20, 0xD6, 0x85, 0xC5, 0xE8, 0x8B, 0x5E, 
 0xD2, 0xC3, 0x59, 0x1C, 0x8E, 0xBC, 0x83, 0xC3, 0xAC, 0xAE, 0x42, 0xC2, 0x6E, 0x0E, 0x0D, 0xE7, 
 0x3C, 0x31, 0xC3, 0x33, 0xD1, 0xD4, 0x21, 0x59, 0x4E, 0x16, 0x03, 0xB4, 0x13, 0xCC, 0x34, 0x4F, 
 0x24, 0x64, 0x67, 0xC3, 0x3E, 0xF4, 0x13, 0x76, 0xD2, 0xDD, 0xDD, 0xDD, 0xC1, 0x15, 0xA8, 0xEF, 
 0xF0, 0x74, 0x74, 0x5B, 0x9C, 0xDB, 0x67, 0xAE, 0x7B, 0x2E, 0x97, 0xCB, 0xE5, 0x95, 0x6F, 0x9F, 
 0x69, 0x27, 0x75, 0x92, 0xF3, 0xCA, 0x61, 0x1A, 0xE5, 0x31, 0x33, 0x6B, 0x10, 0xCB, 0xF1, 0x55, 
 0x2A, 0x54, 0x81, 0x07, 0xDF, 0x1E, 0x27, 0x7F, 0x7F, 0x3E, 0x8E, 0xB0, 0xA7, 0x69, 0x7A, 0x32, 
 0xD5, 0xB3, 0x61, 0xA2, 0xCF, 0xC9, 0xCE, 0x49, 0x3C, 0xAF, 0xB2, 0xF1, 0x42, 0x46, 0x51, 0xD0, 
 0x0D, 0x81, 0x28, 0x68, 0x47, 0x62, 0x94, 0xE8, 0x6C, 0xE7, 0x27, 0x49, 0x77, 0x25, 0x79, 0xD3, 
 0xA8, 0xBD, 0xA3, 0xDB, 0x8D, 0xDB, 0xCE, 0x56, 0x9F, 0xEF, 0x1F, 0x3F, 0x0E, 0x46, 0x17, 0x4A, 
 0x5A, 0xCD, 0xA0, 0x57, 0xBD, 0x88, 0xF0, 0x36, 0xC3, 0x07, 0xCA, 0x72, 0x6D, 0x4A, 0x82, 0x93, 
 0xA9, 0xD0, 0x59, 0x4C, 0x3F, 0xBC, 0xFF, 0xF4, 0x48, 0x09, 0x4F, 0xDD, 0x1D, 0x14, 0x53, 0x4A, 
 0x40, 0xA5, 0x9E, 0x0A, 0x2D, 0x1B, 0x69, 0x45, 0xC5, 0x8D, 0x0D, 0x9C, 0x3E, 0x43, 0xC7, 0x1C, 
 0x47, 0xF1, 0xC5, 0x85, 0x8B, 0xF6, 0x20, 0x4C, 0xB9, 0xE5, 0x06, 0x42, 0x1F, 0x29, 0x4A, 0x8C, 
 0x7F, 0xE1, 0x13, 0xD2, 0xCE, 0x46, 0x9A, 0x0B, 0x09, 0xCE, 0x6D, 0x0A, 0x15, 0xCE, 0xE7, 0x49, 
 0x22, 0xD4, 0x95, 0x5B, 0x26, 0xEB, 0x2F, 0xB4, 0x1B, 0xE3, 0x79, 0xE7, 0x83, 0x0E, 0x6C, 0x53, 
 0xC9, 0xEB, 0x3A, 0x1E, 0xB7, 0x97, 0x41, 0x37, 0x66, 0x69, 0xDD, 0x24, 0xA5, 0xC0, 0x69, 0xBF, 
 0xE1, 0xB2, 0xC1, 0x6D, 0xCB, 0x91, 0x3C, 0x0C, 0xCC, 0x1D, 0x4F, 0x07, 0xD2, 0xB1, 0x0C, 0x5A, 
 0x9A, 0xFF, 0x2F, 0x5B, 0x09, 0x9F, 0x76, 0xB5, 0x85, 0xF2, 0xFB, 0xF8, 0x4A, 0xA8, 0xBD, 0x97, 
 0xFF, 0xCC, 0xB8, 0x87, 0x71, 0x9A, 0xB3, 0x93, 0xF4, 0x5D, 0x12, 0x05, 0x6D, 0xE3, 0x20, 0x5E, 
 0xF7, 0x97, 0xEB, 0x6F, 0xA6, 0x18, 0x49, 0x26, 0x82, 0x09, 0x00, 0x00};
 
const uint8_t successResponse[] PROGMEM = {
 0x1F, 0x8B, 0x08, 0x08, 0x30, 0xB2, 0xEF, 0x5F, 0x00, 0x00, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 
 0x73, 0x2E, 0x68, 0x74, 0x6D, 0x6C, 0x00, 0x95, 0x54, 0xDB, 0x8E, 0xD3, 0x30, 0x10, 0x7D, 0xAF, 
 0xD4, 0x7F, 0x30, 0xA9, 0x50, 0x5E, 0x9A, 0x26, 0xE9, 0x76, 0x97, 0x55, 0x70, 0xF3, 0xC0, 0x02, 
 0xE2, 0x01, 0x04, 0x5A, 0x15, 0x09, 0x1E, 0x9D, 0x64, 0xD2, 0x58, 0x75, 0xEC, 0x28, 0x76, 0x7A, 
 0x01, 0xF1, 0xEF, 0x4C, 0x2E, 0xCE, 0xB6, 0xCB, 0x0A, 0x96, 0x48, 0xB9, 0x8D, 0x67, 0xC6, 0xE7, 
 0xCC, 0x19, 0x0F, 0x7D, 0xF1, 0xF6, 0xF3, 0xDD, 0xE6, 0xFB, 0x97, 0x77, 0xA4, 0x30, 0xA5, 0x88, 
 0xA7, 0x13, 0x3A, 0xBE, 0x81, 0x65, 0xF8, 0x26, 0x78, 0x51, 0xC3, 0x8D, 0x80, 0xF8, 0xDB, 0xDD, 
 0xE6, 0xFE, 0x23, 0xF9, 0x5A, 0x09, 0xC5, 0x32, 0xA2, 0x9B, 0x34, 0x05, 0xAD, 0xF3, 0x46, 0x50, 
 0xBF, 0x5F, 0x1E, 0x7C, 0x05, 0x97, 0x3B, 0x52, 0x83, 0x58, 0x3B, 0x3C, 0x55, 0xD2, 0x21, 0xE6, 
 0x54, 0x01, 0x7E, 0x97, 0x6C, 0x0B, 0x7E, 0x25, 0xB7, 0x0E, 0x29, 0x6A, 0xC8, 0xD7, 0x8E, 0x9F, 
 0xB3, 0x7D, 0xEB, 0xB0, 0xC0, 0x87, 0x63, 0x63, 0x4B, 0x30, 0x8C, 0x48, 0x56, 0x62, 0x80, 0x29, 
 0xA0, 0x04, 0x2F, 0x55, 0x42, 0xD5, 0x0E, 0x41, 0x3F, 0x03, 0xD2, 0xAC, 0x9D, 0x59, 0x10, 0xDC, 
 0xBE, 0xBA, 0xCD, 0x2F, 0x03, 0xEC, 0xAA, 0x7B, 0xE0, 0x99, 0x29, 0xD6, 0x19, 0x60, 0x62, 0xF0, 
 0xBA, 0x9F, 0x39, 0xE1, 0x92, 0x1B, 0xCE, 0x84, 0xA7, 0x53, 0x26, 0x60, 0x1D, 0x2E, 0x82, 0x39, 
 0x29, 0xD9, 0x91, 0x97, 0x4D, 0x79, 0x6E, 0x6A, 0x34, 0xD4, 0xDD, 0x3F, 0x4B, 0xD0, 0x14, 0xB8, 
 0x3D, 0x08, 0x77, 0xCF, 0xE1, 0x50, 0xA9, 0xDA, 0xB8, 0x6D, 0x41, 0xB4, 0x39, 0x75, 0x2C, 0x53, 
 0xDC, 0x0B, 0x6A, 0xF2, 0xB3, 0x87, 0xD0, 0x6D, 0x13, 0x91, 0xD5, 0x32, 0xA8, 0x8E, 0xAF, 0x7B, 
 0x13, 0xE6, 0xF7, 0x06, 0x73, 0x18, 0x04, 0x2F, 0x47, 0x6B, 0xBD, 0xE5, 0x32, 0x22, 0xE8, 0x47, 
 0x58, 0x63, 0xD4, 0x60, 0xCE, 0x11, 0xBC, 0x97, 0xB3, 0x92, 0x8B, 0x53, 0x44, 0xDC, 0x7B, 0x95, 
 0x28, 0xA3, 0xDC, 0x39, 0xD1, 0x4C, 0x6A, 0x0F, 0x41, 0xF1, 0x7C, 0xF0, 0xEB, 0x2A, 0x11, 0x91, 
 0xD9, 0x6A, 0xB5, 0x42, 0xCB, 0xAF, 0xE9, 0x64, 0x3A, 0x69, 0x15, 0x7A, 0x00, 0x92, 0xB0, 0x74, 
 0xB7, 0xAD, 0x55, 0x23, 0x33, 0xCF, 0xFA, 0x76, 0xC5, 0x7A, 0x7F, 0x99, 0xE0, 0x50, 0x70, 0x03, 
 0x83, 0xA9, 0x62, 0x59, 0xC6, 0xE5, 0x36, 0x22, 0x37, 0x23, 0xF6, 0xE7, 0xC2, 0x49, 0xD4, 0xD1, 
 0xD3, 0x05, 0xCB, 0xD4, 0x01, 0x49, 0x22, 0xA3, 0xF6, 0xBE, 0xC6, 0x7B, 0x76, 0xDD, 0x5D, 0x76, 
 0x03, 0xA5, 0xB1, 0xFA, 0x0A, 0x59, 0x63, 0x43, 0x30, 0xC3, 0xF7, 0x30, 0x62, 0x0F, 0x2D, 0xEE, 
 0xB3, 0xBA, 0xFC, 0x27, 0x86, 0xCE, 0x4F, 0xF3, 0x1F, 0x10, 0x91, 0xAB, 0xA5, 0x4D, 0xDC, 0xAB, 
 0x13, 0x67, 0x7C, 0x6F, 0x37, 0x18, 0x59, 0x2E, 0x57, 0x2D, 0xD0, 0xE0, 0xFC, 0xF1, 0x6C, 0x36, 
 0x5D, 0xEE, 0x45, 0xD2, 0x18, 0xA3, 0xA4, 0x4D, 0x6C, 0xE0, 0x68, 0xBC, 0x0C, 0x52, 0x55, 0xB3, 
 0x9E, 0xA4, 0x54, 0x12, 0xC6, 0x8C, 0x35, 0x6A, 0x73, 0x61, 0x7A, 0x42, 0x80, 0x7F, 0x69, 0x76, 
 0x2E, 0x50, 0x07, 0xFF, 0x4F, 0xE6, 0xE1, 0x83, 0x76, 0x69, 0x53, 0xEB, 0x36, 0x47, 0xA5, 0x78, 
 0x5B, 0x83, 0xBF, 0x70, 0xBB, 0x19, 0xB8, 0x0D, 0x2E, 0xAA, 0x31, 0x78, 0x6A, 0xE1, 0x02, 0xAD, 
 0x95, 0x25, 0x5C, 0x0E, 0xFD, 0xFA, 0xB8, 0x71, 0x33, 0xAE, 0x2B, 0xC1, 0x50, 0x21, 0x2E, 0xDB, 
 0x60, 0x2F, 0x11, 0x2A, 0xDD, 0x3D, 0xAA, 0x54, 0x54, 0xA8, 0xFD, 0x59, 0x87, 0x3E, 0x81, 0xE4, 
 0xAA, 0x45, 0x32, 0xF6, 0x34, 0xF5, 0xED, 0x21, 0xA3, 0xFE, 0x30, 0x7F, 0x68, 0xA2, 0xB2, 0x53, 
 0x77, 0xDC, 0xE9, 0x20, 0x6D, 0xF7, 0xDD, 0xF7, 0x7E, 0x4C, 0x8B, 0x70, 0x18, 0x4B, 0x1F, 0x36, 
 0x9F, 0xEC, 0x6C, 0x82, 0x1A, 0xA3, 0xC3, 0xB8, 0x4F, 0x61, 0x03, 0xB0, 0x21, 0xEC, 0xD0, 0xA8, 
 0xE2, 0x4D, 0x01, 0xA4, 0xE9, 0xE7, 0xD8, 0x81, 0xE9, 0xB3, 0x59, 0xB6, 0xA0, 0x7E, 0x65, 0xDD, 
 0x70, 0xB0, 0x08, 0xA6, 0xF5, 0xDA, 0xE9, 0xB9, 0x8C, 0x83, 0xCB, 0x89, 0xDF, 0xA0, 0x6C, 0xD4, 
 0x67, 0x7D, 0x62, 0xDF, 0x66, 0xA6, 0xFE, 0x08, 0x90, 0xFA, 0x03, 0x6A, 0xC4, 0xD0, 0x8E, 0xD3, 
 0xDF, 0x93, 0x08, 0xAE, 0x24, 0x66, 0x05, 0x00, 0x00};

const uint8_t failedResponse[] PROGMEM =  {
 0x1F, 0x8B, 0x08, 0x08, 0xA2, 0xB2, 0xEF, 0x5F, 0x00, 0x00, 0x66, 0x61, 0x69, 0x6C, 0x65, 0x64, 
 0x2E, 0x68, 0x74, 0x6D, 0x6C, 0x00, 0x95, 0x54, 0x4B, 0x6F, 0x9B, 0x40, 0x10, 0x3E, 0xC7, 0x52, 
 0xFE, 0xC3, 0x06, 0xAB, 0xE2, 0x62, 0x0C, 0x38, 0x4E, 0x1A, 0xD1, 0xB5, 0x0F, 0x7D, 0xA9, 0x87, 
 0x56, 0xAD, 0xAA, 0xE4, 0xD0, 0xE3, 0xC2, 0x0E, 0x66, 0xE5, 0x65, 0x17, 0xC1, 0xE2, 0x47, 0xAB, 
 0xFE, 0xF7, 0x0E, 0xB0, 0x10, 0xEC, 0x44, 0x6D, 0x8A, 0x04, 0xD8, 0x1F, 0xF3, 0xF8, 0x66, 0x67, 
 0xBE, 0xA1, 0x57, 0xEF, 0xBF, 0xBE, 0xBB, 0xFF, 0xF1, 0xED, 0x03, 0xC9, 0x4C, 0x2E, 0xD7, 0x97, 
 0x13, 0x3A, 0xBC, 0x81, 0x71, 0x7C, 0x13, 0xBC, 0xA8, 0x11, 0x46, 0xC2, 0xFA, 0xD3, 0xFD, 0x97, 
 0xCF, 0xE4, 0xA1, 0x90, 0x9A, 0x71, 0x92, 0x32, 0x21, 0x81, 0x53, 0xBF, 0xFB, 0x62, 0xCD, 0xA4, 
 0x50, 0x5B, 0x52, 0x82, 0x5C, 0x39, 0x22, 0xD1, 0xCA, 0x21, 0xE6, 0x58, 0x00, 0xFE, 0xCE, 0xD9, 
 0x06, 0xFC, 0x42, 0x6D, 0x1C, 0x92, 0x95, 0x90, 0xAE, 0x1C, 0x3F, 0x65, 0xBB, 0xC6, 0x60, 0x8E, 
 0x0F, 0xA7, 0xF7, 0xCD, 0xC1, 0x30, 0xA2, 0x58, 0x8E, 0x0E, 0x26, 0x83, 0x1C, 0xBC, 0x44, 0x4B, 
 0x5D, 0x3A, 0x04, 0xED, 0x0C, 0x28, 0xB3, 0x72, 0xA6, 0x41, 0x70, 0xF7, 0xFA, 0x2E, 0x6D, 0x1C, 
 0x2E, 0x68, 0x65, 0x8E, 0x6D, 0xDA, 0x04, 0x3F, 0x41, 0x49, 0x7E, 0x75, 0x41, 0xF6, 0x82, 0x9B, 
 0x2C, 0x22, 0xCB, 0x45, 0x50, 0x1C, 0xDE, 0x74, 0x50, 0xCE, 0x0E, 0x9E, 0x85, 0xC3, 0x20, 0x78, 
 0x35, 0xA0, 0xE5, 0x46, 0xA8, 0x88, 0xA0, 0x1D, 0x61, 0xB5, 0xD1, 0x16, 0x4E, 0x31, 0x97, 0x97, 
 0xB2, 0x5C, 0xC8, 0x63, 0x44, 0xDC, 0xEF, 0x3A, 0xD6, 0x46, 0xBB, 0x33, 0x52, 0x31, 0x55, 0x79, 
 0x15, 0x94, 0x22, 0xB5, 0x76, 0x2D, 0xB5, 0x88, 0x4C, 0x97, 0xCB, 0x25, 0x22, 0xBF, 0x2F, 0x27, 
 0x97, 0x93, 0xE6, 0xB4, 0x1E, 0x89, 0xC4, 0x2C, 0xD9, 0x6E, 0x4A, 0x5D, 0x2B, 0xEE, 0xF5, 0xB6, 
 0x2D, 0xFB, 0x8F, 0xA7, 0x01, 0xF6, 0x99, 0x30, 0x60, 0xA1, 0x82, 0x71, 0x2E, 0xD4, 0x26, 0x22, 
 0xB7, 0x03, 0xF7, 0x97, 0xD2, 0x89, 0xF5, 0xC1, 0xAB, 0x32, 0xC6, 0xF5, 0x1E, 0x8B, 0xC4, 0x8A, 
 0x9A, 0xFB, 0x06, 0xEF, 0xE9, 0x4D, 0x7B, 0xF5, 0x09, 0x74, 0x25, 0x8C, 0xD0, 0x58, 0x35, 0x76, 
 0x88, 0x19, 0xB1, 0x83, 0x81, 0x7B, 0xD8, 0xF3, 0x1E, 0x9D, 0xCB, 0x7F, 0x72, 0x68, 0xED, 0x2A, 
 0xF1, 0x13, 0x22, 0x72, 0xBD, 0xE8, 0x03, 0x77, 0xDD, 0x59, 0x73, 0xB1, 0xEB, 0x13, 0x0C, 0x55, 
 0x2E, 0x96, 0x0D, 0xD1, 0x60, 0xFC, 0x78, 0x71, 0x35, 0x6D, 0xEC, 0x79, 0x5C, 0x1B, 0xA3, 0x55, 
 0x1F, 0xD8, 0xC0, 0xC1, 0x78, 0x1C, 0x12, 0x5D, 0xB2, 0xAE, 0x48, 0xA5, 0x15, 0x0C, 0x11, 0x4B, 
 0xEC, 0xCD, 0x09, 0xF4, 0x4C, 0x03, 0xFE, 0xD5, 0xB3, 0x71, 0x83, 0x5A, 0xFA, 0x4F, 0x2B, 0x0F, 
 0x1F, 0x7B, 0x97, 0xD4, 0x65, 0xD5, 0xC4, 0x28, 0xB4, 0x68, 0xCE, 0xE0, 0x2F, 0xB5, 0xDD, 0xDA, 
 0xDA, 0xAC, 0x89, 0xAE, 0x0D, 0xCA, 0x08, 0x4E, 0xD8, 0xF6, 0x6D, 0x09, 0x17, 0x76, 0x5E, 0xCF, 
 0x07, 0x97, 0x8B, 0xAA, 0x90, 0x0C, 0x3B, 0x24, 0x54, 0xE3, 0xEC, 0xC5, 0x52, 0x27, 0xDB, 0xB3, 
 0x93, 0x8A, 0x32, 0xBD, 0x1B, 0x4D, 0xE8, 0x33, 0x4C, 0xAE, 0x1B, 0x26, 0xA3, 0x99, 0xA6, 0x7E, 
 0x2F, 0xB3, 0x5E, 0x9F, 0xBD, 0x18, 0xDD, 0x56, 0x52, 0x2B, 0x0E, 0xA8, 0x63, 0xE8, 0xF4, 0x35, 
 0xC3, 0xDC, 0x38, 0x5F, 0x4C, 0x7A, 0x55, 0xC2, 0x24, 0xAC, 0xC2, 0x79, 0x30, 0x6B, 0xD4, 0x27, 
 0xF2, 0x3A, 0x1F, 0x43, 0x35, 0x4E, 0x4D, 0xFB, 0x9F, 0xC5, 0x08, 0x05, 0x6E, 0xA7, 0x79, 0x77, 
 0x27, 0x60, 0x5F, 0xE8, 0xD2, 0xB8, 0xCD, 0xEA, 0xF1, 0xED, 0xEE, 0xA1, 0xB1, 0xE6, 0xC7, 0x56, 
 0xEF, 0x76, 0x92, 0x3A, 0xEE, 0xED, 0xBE, 0xE8, 0x04, 0x37, 0x42, 0x3A, 0x34, 0x1C, 0x6F, 0x29, 
 0x28, 0x31, 0x54, 0x38, 0xF6, 0xF2, 0x9F, 0xB8, 0x51, 0x9C, 0xCE, 0xF3, 0x28, 0xC5, 0xFA, 0xA1, 
 0xE0, 0xCC, 0x80, 0xDD, 0x72, 0xE4, 0x8A, 0xFA, 0xC5, 0xA9, 0x0D, 0xC5, 0xB3, 0x90, 0xAC, 0xAA, 
 0x56, 0x4E, 0x77, 0xB8, 0xC3, 0x6A, 0x73, 0xD6, 0x6F, 0x71, 0x8E, 0xA8, 0xCF, 0x4E, 0xB2, 0x76, 
 0x39, 0x2E, 0xA8, 0x3F, 0xD4, 0x41, 0x7D, 0x5B, 0x1B, 0x52, 0x6A, 0x16, 0xEE, 0x1F, 0xE9, 0x19, 
 0x60, 0x41, 0x88, 0x05, 0x00, 0x00};
 

template <typename ServerType>
ESP8266HTTPUpdateServerTemplate<ServerType>::ESP8266HTTPUpdateServerTemplate(bool serial_debug)
{
  _serial_output = serial_debug;
  _server = NULL;
  _username = emptyString;
  _password = emptyString;
  _authenticated = false;
}

template <typename ServerType>
void ESP8266HTTPUpdateServerTemplate<ServerType>::setup(ESP8266WebServerTemplate<ServerType> *server, const String& path, const String& username, const String& password)
{
    _server = server;
    _username = username;
    _password = password;

    // handler for the /update form page
    _server->on(path.c_str(), HTTP_GET, [&](){
      if(_username != emptyString && _password != emptyString && !_server->authenticate(_username.c_str(), _password.c_str()))
        return _server->requestAuthentication();
      _server->sendHeader(PSTR("Content-Encoding"), PSTR("gzip"));		
      _server->send_P(200, PSTR("text/html"), (const char*)serverIndex, 924);
    });

    // handler for the /update form POST (once file upload finishes)
    _server->on(path.c_str(), HTTP_POST, [&](){
      if(!_authenticated)
        return _server->requestAuthentication();
      if (Update.hasError()) {
        _server->sendHeader(PSTR("Content-Encoding"), PSTR("gzip"));		
        //_server->send_P(200, PSTR("text/html"), (const char*)failedResponse, 630);
        _server->send(500, F("text/html"), String(F("Update error: ")) + _updaterError);
        _server->client().stop();
        delay(100);
      } else {
        _server->sendHeader(PSTR("Content-Encoding"), PSTR("gzip"));		
        //_server->client().setNoDelay(true);
        _server->send_P(200, PSTR("text/html"), (const char*)successResponse, 633);
        _server->client().stop();
        delay(100);
        ESP.restart();
      }
    },[&](){
      // handler for the file upload, get's the sketch bytes, and writes
      // them through the Update object
      HTTPUpload& upload = _server->upload();

      if(upload.status == UPLOAD_FILE_START){
        _updaterError.clear();
        //if (_serial_output)
          //Serial.setDebugOutput(true);

        _authenticated = (_username == emptyString || _password == emptyString || _server->authenticate(_username.c_str(), _password.c_str()));
        if(!_authenticated){
          //if (_serial_output)
            //Serial.printf("Unauthenticated Update\n");
          return;
        }

        WiFiUDP::stopAll();
        //if (_serial_output)
          //Serial.printf("Update: %s\n", upload.filename.c_str());
        Update.runAsync(true);
        if (upload.name == "filesystem") {
          size_t fsSize = ((size_t) &_FS_end - (size_t) &_FS_start);
          close_all_fs();
          if (!Update.begin(fsSize, U_FS)){//start with max available size
            //if (_serial_output) Update.printError(Serial);
            _setUpdaterError();
          }
        } else {
          uint32_t maxSketchSpace = (ESP.getFreeSketchSpace() - 0x1000) & 0xFFFFF000;
          if (!Update.begin(maxSketchSpace, U_FLASH)){                  //start with max available size
            _setUpdaterError();
          }
        }
      } else if(_authenticated && upload.status == UPLOAD_FILE_WRITE && !_updaterError.length()){
        //if (_serial_output) Serial.printf(".");
        if(Update.write(upload.buf, upload.currentSize) != upload.currentSize){
          _setUpdaterError();
        }
      } else if(_authenticated && upload.status == UPLOAD_FILE_END && !_updaterError.length()){
        if(Update.end(true)){ //true to set the size to the current progress
          //if (_serial_output) Serial.printf("Update Success: %u\nRebooting...\n", upload.totalSize);
        } else {
          _setUpdaterError();
        }
        //if (_serial_output) Serial.setDebugOutput(false);
      } else if(_authenticated && upload.status == UPLOAD_FILE_ABORTED){
        Update.end();
        //if (_serial_output) Serial.println("Update was aborted");
      }
      delay(0);
    });
}

template <typename ServerType>
void ESP8266HTTPUpdateServerTemplate<ServerType>::_setUpdaterError()
{
  //if (_serial_output) Update.printError(Serial);
  StreamString str;
  Update.printError(str);
  _updaterError = str.c_str();
}

};
